
// The_speech_contest.cpp: 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include <iostream>
#include "string"
#include <list>
#include <algorithm>
#include <vector>
#include <functional>
#include <iterator>
#include <numeric>
#include "set"
#include <map>
#include <deque>
using namespace std;

class Speaker
{
public:
	string m_name;
	int	   m_score[3];
};
//产生选手
void GenSpeaker(map<int, Speaker> &mapSpeaker, vector<int> &v)
{
	string str = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	random_shuffle(str.begin(), str.end());

	for (int i = 0; i < 24; i++)
	{
		Speaker tmp;
		tmp.m_name = "Player";
		tmp.m_name = tmp.m_name + str[i];
		mapSpeaker.insert(pair<int, Speaker>(100 + i, tmp));
	}
	for (int i=0; i<24; i++)
	{ 
		v.push_back(100+i);   //参赛人员
	}
	cout << "名单生成" << endl;

}
//选手抽签
void speech_contest_draw(vector<int> &v)
{
	
	return random_shuffle(v.begin(), v.end());
	
}
//选手比赛
int speech_contest(int index, vector<int>&v1, map<int, Speaker>&mapSpeaker, vector<int>&v2)
{
	//小组的比赛得分 记录下来； 求出前三名 后三名
	multimap<int, int, greater<int>> multmapGroup;// 小组成绩
	int tmpCount = 0;

	for (vector<int>::iterator it = v1.begin(); it != v1.end(); it++)
	{
		tmpCount++;
		//打分
		{
			deque<int> dscore;
			for (int j = 0; j < 10; j++)// 10个评委打分
			{
				int score = 50 + rand() % 50;
				dscore.push_back(score);
			}
			sort(dscore.begin(), dscore.end());
			dscore.pop_back();
			dscore.pop_front();  //去除最高分  最低分

			//求平均分
			int scoresum = accumulate(dscore.begin(), dscore.end(), 0);
			int scoreavg = scoresum / dscore.size();
			mapSpeaker[*it].m_score[index] = scoreavg; //选手得分 存入容器中
			multmapGroup.insert(pair<int, int > (scoreavg, *it));
		}
		if (tmpCount % 6 == 0)
		{
			cout << "小组的比赛成绩" << endl;
			
			for (multimap<int, int, greater<int>>::iterator mit = multmapGroup.begin(); mit != multmapGroup.end(); mit++)
			{
				//编号   姓名  得分
				cout << mit->second << "\t" << mapSpeaker[mit->second].m_name << "\t" << mit->first << endl;
			}
			while (multmapGroup.size() > 3)
			{
				multimap<int, int, greater<int>>::iterator it1 = multmapGroup.begin();
				v2.push_back(it1->second); //把前三名 放到v2中  晋级名单
				multmapGroup.erase(it1);

			}
			multmapGroup.clear();//清空本小组 比赛成绩
		}

	}
	return 0;
}
//查看比赛结果
int speech_contest_print(int index, vector<int>&v, map<int, Speaker>&mapSpeaker)
{
	printf("第%d轮 晋级名单\n", index + 1);
	for (vector<int>::iterator it = v.begin(); it != v.end(); it++)
	{
		cout << "参赛编号：" << *it << "\t" << mapSpeaker[*it].m_name << "\t" << mapSpeaker[*it].m_score[index] << endl;
	}
	return 0;
}
int main()
{
	//容器的设计
	map <int, Speaker> mapSpeaker; //参加比赛的选手
	vector<int>					v1;//第一轮 演讲比赛 名单
	vector<int>					v2;//第二轮 演讲比赛 名单
	vector<int>					v3;//第三轮 演讲比赛 名单
	vector<int>					v4;//第四轮 演讲比赛 名单

	//产生选手  得到第一轮选手的名单
	GenSpeaker(mapSpeaker, v1);

	cout << "\n\n\n比赛报名完毕" << endl;
	//第一轮 选手抽签  选手比赛 查看比赛结果
	cout << "\n\n\n任意键，开始第一轮比赛" << endl;
	cin.get();
	speech_contest_draw(v1);
	speech_contest(0, v1, mapSpeaker, v2);
	speech_contest_print(0, v2, mapSpeaker);

	//第二轮 选手抽签  选手比赛 查看比赛结果
	cout << "\n\n\n任意键，开始第二轮比赛" << endl;
	cin.get();
	speech_contest_draw(v2);
	speech_contest(1, v2, mapSpeaker, v3);
	speech_contest_print(1, v3, mapSpeaker);

	//第三轮 选手抽签	选手比赛 查看比赛结果
	cout << "\n\n\n任意键，开始第三轮比赛" << endl;
	cin.get();
	speech_contest_draw(v3);
	speech_contest(2, v3, mapSpeaker, v4);
	speech_contest_print(2, v4, mapSpeaker);

	cout << "***************" << endl;
	cout << "You are so fine" << endl;
	cout << "***************" << endl;
	system("pause");
	return 0;
}

